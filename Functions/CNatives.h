#pragma once
#include "API/MHport Common.h"
#include "Extern Natives.h"
#include "Warcraft Functions.h"
float   CDeg2Rad(float   real_1);
float   CRad2Deg(float   real_1);
float   Sin(float   real_1);
float   Cos(float   real_1);
float   Tan(float   real_1);
float   Asin(float   real_1);
float   Acos(float   real_1);
float   Atan(float   real_1);
float   Atan2(float   real_1, float   real_2);
float   SquareRoot(float   real_1);
float   Pow(float   real_1, float   real_2);
float   I2R(int      integer_1);
int     R2I(float   real_1);
const char* I2S(int      integer_1);
const char* R2S(float   real_1);
const char* R2SW(float   real_1, int      integer_2, int      integer_3);
int     S2I(const char* STRING_1);
float   S2R(const char* STRING_1);
int     GetHandleId(jHANDLE  HANDLE_1);
const char* SubString(const char* STRING_1, int      integer_2, int      integer_3);
int     StringLength(const char* STRING_1);
const char* StringCase(const char* STRING_1, bool     BOOL_2);
int     StringHash(const char* STRING_1);
const char* GetLocalizedString(const char* STRING_1);
int     GetLocalizedHotkey(const char* STRING_1);
jHANDLE ConvertRace(int      integer_1);
jHANDLE ConvertAllianceType(int      integer_1);
jHANDLE ConvertRacePref(int      integer_1);
jHANDLE ConvertIGameState(int      integer_1);
jHANDLE ConvertFGameState(int      integer_1);
jHANDLE ConvertPlayerState(int      integer_1);
jHANDLE ConvertPlayerScore(int      integer_1);
jHANDLE ConvertStartLocPrio(int      integer_1);
jHANDLE ConvertPlayerGameResult(int      integer_1);
jHANDLE ConvertUnitState(int      integer_1);
jHANDLE ConvertAIDifficulty(int      integer_1);
jHANDLE ConvertGameEvent(int      integer_1);
jHANDLE ConvertPlayerEvent(int      integer_1);
jHANDLE ConvertPlayerUnitEvent(int      integer_1);
jHANDLE ConvertUnitEvent(int      integer_1);
jHANDLE ConvertWidgetEvent(int      integer_1);
jHANDLE ConvertDialogEvent(int      integer_1);
jHANDLE ConvertLimitOp(int      integer_1);
jHANDLE ConvertUnitType(int      integer_1);
jHANDLE ConvertGameSpeed(int      integer_1);
jHANDLE ConvertPlacement(int      integer_1);
jHANDLE ConvertGameDifficulty(int      integer_1);
jHANDLE ConvertGameType(int      integer_1);
jHANDLE ConvertMapFlag(int      integer_1);
jHANDLE ConvertMapVisibility(int      integer_1);
jHANDLE ConvertMapSetting(int      integer_1);
jHANDLE ConvertMapDensity(int      integer_1);
jHANDLE ConvertMapControl(int      integer_1);
jHANDLE ConvertPlayerColor(int      integer_1);
jHANDLE ConvertPlayerSlotState(int      integer_1);
jHANDLE ConvertVolumeGroup(int      integer_1);
jHANDLE ConvertCameraField(int      integer_1);
jHANDLE ConvertBlendMode(int      integer_1);
jHANDLE ConvertRarityControl(int      integer_1);
jHANDLE ConvertTexMapFlags(int      integer_1);
jHANDLE ConvertFogState(int      integer_1);
jHANDLE ConvertEffectType(int      integer_1);
jHANDLE ConvertVersion(int      integer_1);
jHANDLE ConvertItemType(int      integer_1);
jHANDLE ConvertAttackType(int      integer_1);
jHANDLE ConvertDamageType(int      integer_1);
jHANDLE ConvertWeaponType(int      integer_1);
jHANDLE ConvertSoundType(int      integer_1);
jHANDLE ConvertPathingType(int      integer_1);
void    SetMapName(const char* STRING_1);
void    SetMapDescription(const char* STRING_1);
void    SetTeams(int      integer_1);
void    SetPlayers(int      integer_1);
void    SetGameTypeSupported(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetMapFlag(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetGameSpeed(jHANDLE  HANDLE_1);
void    SetGamePlacement(jHANDLE  HANDLE_1);
void    SetGameDifficulty(jHANDLE  HANDLE_1);
void    SetResourceDensity(jHANDLE  HANDLE_1);
void    SetCreatureDensity(jHANDLE  HANDLE_1);
void    DefineStartLocation(int      integer_1, float   real_2, float   real_3);
void    DefineStartLocationLoc(int      integer_1, jHANDLE  HANDLE_2);
void    SetStartLocPrioCount(int      integer_1, int      integer_2);
void    SetStartLocPrio(int      integer_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
int     GetStartLocPrioSlot(int      integer_1, int      integer_2);
jHANDLE GetStartLocPrio(int      integer_1, int      integer_2);
int     GetTeams();
int     GetPlayers();
bool    IsGameTypeSupported(jHANDLE  HANDLE_1);
bool    IsMapFlagSet(jHANDLE  HANDLE_1);
jHANDLE GetGameTypeSelected();
jHANDLE GetGamePlacement();
jHANDLE GetGameSpeed();
jHANDLE GetGameDifficulty();
jHANDLE GetResourceDensity();
jHANDLE GetCreatureDensity();
float   GetStartLocationX(int      integer_1);
float   GetStartLocationY(int      integer_1);
jHANDLE GetStartLocationLoc(int      integer_1);
void    SetPlayerTeam(jHANDLE  HANDLE_1, int      integer_2);
void    SetPlayerStartLocation(jHANDLE  HANDLE_1, int      integer_2);
void    ForcePlayerStartLocation(jHANDLE  HANDLE_1, int      integer_2);
void    SetPlayerAlliance(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, bool     BOOL_4);
void    SetPlayerTaxRate(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, int      integer_4);
void    SetPlayerRacePreference(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    SetPlayerRaceSelectable(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetPlayerController(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    SetPlayerColor(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    SetPlayerOnScoreScreen(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetPlayerName(jHANDLE  HANDLE_1, const char* STRING_2);
int     GetPlayerTeam(jHANDLE  HANDLE_1);
const char* GetPlayerName(jHANDLE  HANDLE_1);
int     GetPlayerStartLocation(jHANDLE  HANDLE_1);
float   GetPlayerStartLocationX(jHANDLE  HANDLE_1);
float   GetPlayerStartLocationY(jHANDLE  HANDLE_1);
jHANDLE GetPlayerColor(jHANDLE  HANDLE_1);
bool    GetPlayerSelectable(jHANDLE  HANDLE_1);
jHANDLE GetPlayerController(jHANDLE  HANDLE_1);
jHANDLE GetPlayerSlotState(jHANDLE  HANDLE_1);
int     GetPlayerTaxRate(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
bool    IsPlayerRacePrefSet(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE Location(float   real_1, float   real_2);
void    RemoveLocation(jHANDLE  HANDLE_1);
void    MoveLocation(jHANDLE  HANDLE_1, float   real_2, float   real_3);
float   GetLocationX(jHANDLE  HANDLE_1);
float   GetLocationY(jHANDLE  HANDLE_1);
float   GetLocationZ(jHANDLE  HANDLE_1);
jHANDLE CreateTimer();
void    DestroyTimer(jHANDLE  HANDLE_1);
void    TimerStart(jHANDLE  HANDLE_1, float   real_2, bool     BOOL_3, jCODE     jCODE_4);
float   TimerGetTimeout(jHANDLE  HANDLE_1);
float   TimerGetElapsed(jHANDLE  HANDLE_1);
float   TimerGetRemaining(jHANDLE  HANDLE_1);
void    PauseTimer(jHANDLE  HANDLE_1);
void    ResumeTimer(jHANDLE  HANDLE_1);
jHANDLE GetExpiredTimer();
jHANDLE Condition(jCODE     jCODE_1);
void    DestroyCondition(jHANDLE  HANDLE_1);
jHANDLE Filter(jCODE     jCODE_1);
void    DestroyFilter(jHANDLE  HANDLE_1);
void    DestroyBoolExpr(jHANDLE  HANDLE_1);
jHANDLE And(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE Or(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE Not(jHANDLE  HANDLE_1);
jHANDLE CreateRegion();
void    RemoveRegion(jHANDLE  HANDLE_1);
void    RegionAddRect(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    RegionClearRect(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    RegionAddCell(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    RegionAddCellAtLoc(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    RegionClearCell(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    RegionClearCellAtLoc(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitInRegion(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsPointInRegion(jHANDLE  HANDLE_1, float   real_2, float   real_3);
bool    IsLocationInRegion(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE Rect(float   real_1, float   real_2, float   real_3, float   real_4);
jHANDLE RectFromLoc(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    RemoveRect(jHANDLE  HANDLE_1);
void    CSetRect(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4, float   real_5);
void    SetRectFromLoc(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
float   GetRectCenterX(jHANDLE  HANDLE_1);
float   GetRectCenterY(jHANDLE  HANDLE_1);
void    MoveRectTo(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    MoveRectToLoc(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
float   GetRectMinX(jHANDLE  HANDLE_1);
float   GetRectMinY(jHANDLE  HANDLE_1);
float   GetRectMaxX(jHANDLE  HANDLE_1);
float   GetRectMaxY(jHANDLE  HANDLE_1);
jHANDLE GetWorldBounds();
void    SetFogStateRect(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, bool     BOOL_4);
void    SetFogStateRadius(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3, float   real_4, float   real_5, bool     BOOL_6);
void    SetFogStateRadiusLoc(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, float   real_4, bool     BOOL_5);
void    FogMaskEnable(bool     BOOL_1);
bool    IsFogMaskEnabled();
void    FogEnable(bool     BOOL_1);
bool    IsFogEnabled();
jHANDLE CreateFogModifierRect(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, bool     BOOL_4, bool     BOOL_5);
jHANDLE CreateFogModifierRadius(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3, float   real_4, float   real_5, bool     BOOL_6, bool     BOOL_7);
jHANDLE CreateFogModifierRadiusLoc(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, float   real_4, bool     BOOL_5, bool     BOOL_6);
void    DestroyFogModifier(jHANDLE  HANDLE_1);
void    FogModifierStart(jHANDLE  HANDLE_1);
void    FogModifierStop(jHANDLE  HANDLE_1);
jHANDLE CreateTrigger();
void    DestroyTrigger(jHANDLE  HANDLE_1);
void    ResetTrigger(jHANDLE  HANDLE_1);
void    EnableTrigger(jHANDLE  HANDLE_1);
void    DisableTrigger(jHANDLE  HANDLE_1);
bool    IsTriggerEnabled(jHANDLE  HANDLE_1);
void    TriggerWaitOnSleeps(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsTriggerWaitOnSleeps(jHANDLE  HANDLE_1);
jHANDLE TriggerRegisterVariableEvent(jHANDLE  HANDLE_1, const char* STRING_2, jHANDLE  HANDLE_3, float   real_4);
jHANDLE TriggerRegisterTimerEvent(jHANDLE  HANDLE_1, float   real_2, bool     BOOL_3);
jHANDLE TriggerRegisterTimerExpireEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE TriggerRegisterGameStateEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, float   real_4);
jHANDLE GetEventGameState();
jHANDLE TriggerRegisterDialogEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE TriggerRegisterDialogButtonEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE GetClickedButton();
jHANDLE GetClickedDialog();
float   GetTournamentFinishSoonTimeRemaining();
int     GetTournamentFinishNowRule();
jHANDLE GetTournamentFinishNowPlayer();
int     GetTournamentScore(jHANDLE  HANDLE_1);
const char* GetSaveBasicFilename();
jHANDLE TriggerRegisterGameEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE GetWinningPlayer();
jHANDLE TriggerRegisterPlayerStateEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, jHANDLE  HANDLE_4, float   real_5);
jHANDLE GetEventPlayerState();
jHANDLE TriggerRegisterPlayerEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
jHANDLE TriggerRegisterPlayerUnitEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, jHANDLE  HANDLE_4);
jHANDLE GetAttacker();
jHANDLE GetRescuer();
jHANDLE GetDyingUnit();
jHANDLE GetKillingUnit();
jHANDLE GetDecayingUnit();
jHANDLE GetConstructingStructure();
jHANDLE GetCancelledStructure();
jHANDLE GetConstructedStructure();
int     GetTrainedUnitType();
jHANDLE GetResearchingUnit();
int     GetResearched();
jHANDLE GetTrainedUnit();
jHANDLE GetSellingUnit();
jHANDLE GetSoldUnit();
jHANDLE GetBuyingUnit();
jHANDLE GetSoldItem();
jHANDLE GetChangingUnit();
jHANDLE GetChangingUnitPrevOwner();
jHANDLE GetDetectedUnit();
jHANDLE GetOrderedUnit();
int     OrderId(const char* STRING_1);
const char* OrderId2String(int      integer_1);
int     AbilityId(const char* STRING_1);
const char* AbilityId2String(int      integer_1);
int     UnitId(const char* STRING_1);
const char* UnitId2String(int      integer_1);
const char* GetObjectName(int      integer_1);
int     GetIssuedOrderId();
float   GetOrderPointX();
float   GetOrderPointY();
jHANDLE GetOrderPointLoc();
jHANDLE GetOrderTarget();
jHANDLE GetOrderTargetDestructable();
jHANDLE GetOrderTargetItem();
jHANDLE GetOrderTargetUnit();
jHANDLE GetSpellAbilityUnit();
int     GetSpellAbilityId();
jHANDLE GetSpellAbility();
jHANDLE GetSpellTargetLoc();
float   GetSpellTargetX();
float   GetSpellTargetY();
jHANDLE GetSpellTargetDestructable();
jHANDLE GetSpellTargetItem();
jHANDLE GetSpellTargetUnit();
jHANDLE GetLevelingUnit();
jHANDLE GetLearningUnit();
int     GetLearnedSkill();
int     GetLearnedSkillLevel();
jHANDLE GetRevivableUnit();
jHANDLE GetRevivingUnit();
jHANDLE GetSummoningUnit();
jHANDLE GetSummonedUnit();
jHANDLE GetTransportUnit();
jHANDLE GetLoadedUnit();
jHANDLE GetManipulatingUnit();
jHANDLE GetManipulatedItem();
jHANDLE TriggerRegisterPlayerAllianceChange(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
jHANDLE TriggerRegisterPlayerChatEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, const char* STRING_3, bool     BOOL_4);
const char* GetEventPlayerChatString();
const char* GetEventPlayerChatStringMatched();
jHANDLE TriggerRegisterUnitStateEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, jHANDLE  HANDLE_4, float   real_5);
jHANDLE GetEventUnitState();
jHANDLE TriggerRegisterDeathEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE TriggerRegisterUnitEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
float   GetEventDamage();
jHANDLE GetEventDamageSource();
jHANDLE GetEventDetectingPlayer();
jHANDLE GetEventTargetUnit();
jHANDLE TriggerRegisterFilterUnitEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, jHANDLE  HANDLE_4);
jHANDLE TriggerRegisterUnitInRange(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3, jHANDLE  HANDLE_4);
jHANDLE TriggerRegisterEnterRegion(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
jHANDLE TriggerRegisterLeaveRegion(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
jHANDLE GetTriggeringRegion();
jHANDLE GetEnteringUnit();
jHANDLE GetLeavingUnit();
jHANDLE TriggerAddCondition(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    TriggerRemoveCondition(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    TriggerClearConditions(jHANDLE  HANDLE_1);
jHANDLE TriggerAddAction(jHANDLE  HANDLE_1, jCODE     jCODE_2);
void    TriggerRemoveAction(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    TriggerClearActions(jHANDLE  HANDLE_1);
void    TriggerSleepAction(float   real_1);
void    TriggerWaitForSound(jHANDLE  HANDLE_1, float   real_2);
void    TriggerExecute(jHANDLE  HANDLE_1);
void    TriggerExecuteWait(jHANDLE  HANDLE_1);
bool    TriggerEvaluate(jHANDLE  HANDLE_1);
void    TriggerSyncStart();
void    TriggerSyncReady();
jHANDLE GetTriggerWidget();
jHANDLE GetTriggerDestructable();
jHANDLE GetTriggerUnit();
jHANDLE GetTriggerPlayer();
jHANDLE GetTriggeringTrigger();
jHANDLE GetTriggerEventId();
int     GetTriggerEvalCount(jHANDLE  HANDLE_1);
int     GetTriggerExecCount(jHANDLE  HANDLE_1);
jHANDLE GetFilterUnit();
jHANDLE GetEnumUnit();
jHANDLE GetEnumPlayer();
jHANDLE GetFilterPlayer();
jHANDLE GetFilterDestructable();
jHANDLE GetEnumDestructable();
jHANDLE GetFilterItem();
jHANDLE GetEnumItem();
jHANDLE CreateGroup();
void    DestroyGroup(jHANDLE  HANDLE_1);
void    GroupAddUnit(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    GroupRemoveUnit(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    GroupClear(jHANDLE  HANDLE_1);
void    GroupEnumUnitsOfType(jHANDLE  HANDLE_1, const char* STRING_2, jHANDLE  HANDLE_3);
void    GroupEnumUnitsOfTypeCounted(jHANDLE  HANDLE_1, const char* STRING_2, jHANDLE  HANDLE_3, int      integer_4);
void    GroupEnumUnitsInRect(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
void    GroupEnumUnitsInRectCounted(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, int      integer_4);
void    GroupEnumUnitsOfPlayer(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
void    GroupEnumUnitsInRange(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4, jHANDLE  HANDLE_5);
void    GroupEnumUnitsInRangeOfLoc(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3, jHANDLE  HANDLE_4);
void    GroupEnumUnitsInRangeCounted(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4, jHANDLE  HANDLE_5, int      integer_6);
void    GroupEnumUnitsInRangeOfLocCounted(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3, jHANDLE  HANDLE_4, int      integer_5);
void    GroupEnumUnitsSelected(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
bool    GroupImmediateOrder(jHANDLE  HANDLE_1, const char* STRING_2);
bool    GroupImmediateOrderById(jHANDLE  HANDLE_1, int      integer_2);
bool    GroupPointOrder(jHANDLE  HANDLE_1, const char* STRING_2, float   real_3, float   real_4);
bool    GroupPointOrderLoc(jHANDLE  HANDLE_1, const char* STRING_2, jHANDLE  HANDLE_3);
bool    GroupPointOrderById(jHANDLE  HANDLE_1, int      integer_2, float   real_3, float   real_4);
bool    GroupPointOrderByIdLoc(jHANDLE  HANDLE_1, int      integer_2, jHANDLE  HANDLE_3);
bool    GroupTargetOrder(jHANDLE  HANDLE_1, const char* STRING_2, jHANDLE  HANDLE_3);
bool    GroupTargetOrderById(jHANDLE  HANDLE_1, int      integer_2, jHANDLE  HANDLE_3);
void    ForGroup(jHANDLE  HANDLE_1, jCODE     jCODE_2);
jHANDLE FirstOfGroup(jHANDLE  HANDLE_1);
jHANDLE CreateForce();
void    DestroyForce(jHANDLE  HANDLE_1);
void    ForceAddPlayer(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    ForceRemovePlayer(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    ForceClear(jHANDLE  HANDLE_1);
void    ForceEnumPlayers(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    ForceEnumPlayersCounted(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, int      integer_3);
void    ForceEnumAllies(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
void    ForceEnumEnemies(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
void    ForForce(jHANDLE  HANDLE_1, jCODE     jCODE_2);
float   GetWidgetLife(jHANDLE  HANDLE_1);
void    SetWidgetLife(jHANDLE  HANDLE_1, float   real_2);
float   GetWidgetX(jHANDLE  HANDLE_1);
float   GetWidgetY(jHANDLE  HANDLE_1);
jHANDLE CreateDestructable(int      integer_1, float   real_2, float   real_3, float   real_4, float   real_5, int      integer_6);
jHANDLE CreateDestructableZ(int      integer_1, float   real_2, float   real_3, float   real_4, float   real_5, float   real_6, int      integer_7);
jHANDLE CreateDeadDestructable(int      integer_1, float   real_2, float   real_3, float   real_4, float   real_5, int      integer_6);
jHANDLE CreateDeadDestructableZ(int      integer_1, float   real_2, float   real_3, float   real_4, float   real_5, float   real_6, int      integer_7);
void    RemoveDestructable(jHANDLE  HANDLE_1);
void    KillDestructable(jHANDLE  HANDLE_1);
void    SetDestructableInvulnerable(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsDestructableInvulnerable(jHANDLE  HANDLE_1);
void    EnumDestructablesInRect(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jCODE     jCODE_3);
int     GetDestructableTypeId(jHANDLE  HANDLE_1);
float   GetDestructableX(jHANDLE  HANDLE_1);
float   GetDestructableY(jHANDLE  HANDLE_1);
void    SetDestructableLife(jHANDLE  HANDLE_1, float   real_2);
float   GetDestructableLife(jHANDLE  HANDLE_1);
void    SetDestructableMaxLife(jHANDLE  HANDLE_1, float   real_2);
float   GetDestructableMaxLife(jHANDLE  HANDLE_1);
void    DestructableRestoreLife(jHANDLE  HANDLE_1, float   real_2, bool     BOOL_3);
void    QueueDestructableAnimation(jHANDLE  HANDLE_1, const char* STRING_2);
void    SetDestructableAnimation(jHANDLE  HANDLE_1, const char* STRING_2);
void    SetDestructableAnimationSpeed(jHANDLE  HANDLE_1, float   real_2);
void    ShowDestructable(jHANDLE  HANDLE_1, bool     BOOL_2);
float   GetDestructableOccluderHeight(jHANDLE  HANDLE_1);
void    SetDestructableOccluderHeight(jHANDLE  HANDLE_1, float   real_2);
const char* GetDestructableName(jHANDLE  HANDLE_1);
jHANDLE CreateUnit(jHANDLE  HANDLE_1, int      integer_2, float   real_3, float   real_4, float   real_5);
jHANDLE CreateUnitByName(jHANDLE  HANDLE_1, const char* STRING_2, float   real_3, float   real_4, float   real_5);
jHANDLE CreateUnitAtLoc(jHANDLE  HANDLE_1, int      integer_2, jHANDLE  HANDLE_3, float   real_4);
jHANDLE CreateUnitAtLocByName(jHANDLE  HANDLE_1, const char* STRING_2, jHANDLE  HANDLE_3, float   real_4);
jHANDLE CreateCorpse(jHANDLE  HANDLE_1, int      integer_2, float   real_3, float   real_4, float   real_5);
float   GetUnitState(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
int     GetUnitFoodUsed(jHANDLE  HANDLE_1);
int     GetUnitFoodMade(jHANDLE  HANDLE_1);
int     GetFoodMade(int      integer_1);
int     GetFoodUsed(int      integer_1);
void    SetUnitUseFood(jHANDLE  HANDLE_1, bool     BOOL_2);
float   GetUnitX(jHANDLE  HANDLE_1);
float   GetUnitY(jHANDLE  HANDLE_1);
jHANDLE GetUnitLoc(jHANDLE  HANDLE_1);
jHANDLE GetUnitRallyPoint(jHANDLE  HANDLE_1);
jHANDLE GetUnitRallyUnit(jHANDLE  HANDLE_1);
jHANDLE GetUnitRallyDestructable(jHANDLE  HANDLE_1);
float   GetUnitFacing(jHANDLE  HANDLE_1);
float   GetUnitMoveSpeed(jHANDLE  HANDLE_1);
float   GetUnitDefaultMoveSpeed(jHANDLE  HANDLE_1);
int     GetUnitTypeId(jHANDLE  HANDLE_1);
jHANDLE GetUnitRace(jHANDLE  HANDLE_1);
const char* GetUnitName(jHANDLE  HANDLE_1);
int     GetUnitPointValue(jHANDLE  HANDLE_1);
int     GetUnitPointValueByType(int      integer_1);
void    SetUnitX(jHANDLE  HANDLE_1, float   real_2);
void    SetUnitY(jHANDLE  HANDLE_1, float   real_2);
void    SetUnitPosition(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    SetUnitPositionLoc(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    SetUnitFacing(jHANDLE  HANDLE_1, float   real_2);
void    SetUnitFacingTimed(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    SetUnitFlyHeight(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    SetUnitMoveSpeed(jHANDLE  HANDLE_1, float   real_2);
void    SetUnitTurnSpeed(jHANDLE  HANDLE_1, float   real_2);
void    SetUnitPropWindow(jHANDLE  HANDLE_1, float   real_2);
void    SetUnitCreepGuard(jHANDLE  HANDLE_1, bool     BOOL_2);
float   GetUnitAcquireRange(jHANDLE  HANDLE_1);
float   GetUnitTurnSpeed(jHANDLE  HANDLE_1);
float   GetUnitPropWindow(jHANDLE  HANDLE_1);
float   GetUnitFlyHeight(jHANDLE  HANDLE_1);
float   GetUnitDefaultAcquireRange(jHANDLE  HANDLE_1);
float   GetUnitDefaultTurnSpeed(jHANDLE  HANDLE_1);
float   GetUnitDefaultPropWindow(jHANDLE  HANDLE_1);
float   GetUnitDefaultFlyHeight(jHANDLE  HANDLE_1);
void    SetUnitAcquireRange(jHANDLE  HANDLE_1, float   real_2);
void    SetUnitState(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3);
void    SetUnitOwner(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, bool     BOOL_3);
void    SetUnitRescuable(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, bool     BOOL_3);
void    SetUnitRescueRange(jHANDLE  HANDLE_1, float   real_2);
void    SetUnitColor(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    QueueUnitAnimation(jHANDLE  HANDLE_1, const char* STRING_2);
void    SetUnitAnimation(jHANDLE  HANDLE_1, const char* STRING_2);
void    SetUnitAnimationWithRarity(jHANDLE  HANDLE_1, const char* STRING_2, jHANDLE  HANDLE_3);
void    SetUnitAnimationByIndex(jHANDLE  HANDLE_1, int      integer_2);
void    AddUnitAnimationProperties(jHANDLE  HANDLE_1, const char* STRING_2, bool     BOOL_3);
void    SetUnitScale(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4);
void    SetUnitTimeScale(jHANDLE  HANDLE_1, float   real_2);
void    SetUnitBlendTime(jHANDLE  HANDLE_1, float   real_2);
void    SetUnitVertexColor(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5);
void    SetUnitLookAt(jHANDLE  HANDLE_1, const char* STRING_2, jHANDLE  HANDLE_3, float   real_4, float   real_5, float   real_6);
void    SetUnitPathing(jHANDLE  HANDLE_1, bool     BOOL_2);
void    ResetUnitLookAt(jHANDLE  HANDLE_1);
void    SetHeroStr(jHANDLE  HANDLE_1, int      integer_2, bool     BOOL_3);
void    SetHeroAgi(jHANDLE  HANDLE_1, int      integer_2, bool     BOOL_3);
void    SetHeroInt(jHANDLE  HANDLE_1, int      integer_2, bool     BOOL_3);
int     GetHeroStr(jHANDLE  HANDLE_1, bool     BOOL_2);
int     GetHeroAgi(jHANDLE  HANDLE_1, bool     BOOL_2);
int     GetHeroInt(jHANDLE  HANDLE_1, bool     BOOL_2);
int     GetHeroSkillPoints(jHANDLE  HANDLE_1);
bool    UnitStripHeroLevel(jHANDLE  HANDLE_1, int      integer_2);
bool    UnitModifySkillPoints(jHANDLE  HANDLE_1, int      integer_2);
int     GetHeroXP(jHANDLE  HANDLE_1);
void    SetHeroXP(jHANDLE  HANDLE_1, int      integer_2, bool     BOOL_3);
void    AddHeroXP(jHANDLE  HANDLE_1, int      integer_2, bool     BOOL_3);
void    SetHeroLevel(jHANDLE  HANDLE_1, int      integer_2, bool     BOOL_3);
int     GetHeroLevel(jHANDLE  HANDLE_1);
int     GetUnitLevel(jHANDLE  HANDLE_1);
const char* GetHeroProperName(jHANDLE  HANDLE_1);
void    SuspendHeroXP(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsSuspendedXP(jHANDLE  HANDLE_1);
void    SelectHeroSkill(jHANDLE  HANDLE_1, int      integer_2);
int     GetUnitAbilityLevel(jHANDLE  HANDLE_1, int      integer_2);
bool    ReviveHero(jHANDLE  HANDLE_1, float   real_2, float   real_3, bool     BOOL_4);
bool    ReviveHeroLoc(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, bool     BOOL_3);
void    SetUnitExploded(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetUnitInvulnerable(jHANDLE  HANDLE_1, bool     BOOL_2);
void    PauseUnit(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsUnitPaused(jHANDLE  HANDLE_1);
bool    UnitAddItem(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE UnitAddItemById(jHANDLE  HANDLE_1, int      integer_2);
bool    UnitAddItemToSlotById(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
void    UnitRemoveItem(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE UnitRemoveItemFromSlot(jHANDLE  HANDLE_1, int      integer_2);
bool    UnitHasItem(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE UnitItemInSlot(jHANDLE  HANDLE_1, int      integer_2);
int     UnitInventorySize(jHANDLE  HANDLE_1);
bool    UnitDropItemPoint(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3, float   real_4);
bool    UnitDropItemSlot(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, int      integer_3);
bool    UnitDropItemTarget(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
bool    UnitUseItem(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    UnitUseItemPoint(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3, float   real_4);
bool    UnitUseItemTarget(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
int     GetUnitCurrentOrder(jHANDLE  HANDLE_1);
void    SetResourceAmount(jHANDLE  HANDLE_1, int      integer_2);
void    AddResourceAmount(jHANDLE  HANDLE_1, int      integer_2);
int     GetResourceAmount(jHANDLE  HANDLE_1);
void    SelectUnit(jHANDLE  HANDLE_1, bool     BOOL_2);
void    ClearSelection();
void    UnitAddIndicator(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5);
void    AddIndicator(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5);
void    KillUnit(jHANDLE  HANDLE_1);
void    RemoveUnit(jHANDLE  HANDLE_1);
void    ShowUnit(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsUnitInForce(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitInGroup(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitOwnedByPlayer(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitAlly(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitEnemy(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitVisible(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitDetected(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitInvisible(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitFogged(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitMasked(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitSelected(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitRace(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitType(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnit(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitInRange(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3);
bool    IsUnitInRangeXY(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4);
bool    IsUnitInRangeLoc(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3);
bool    IsUnitHidden(jHANDLE  HANDLE_1);
bool    IsUnitIllusion(jHANDLE  HANDLE_1);
bool    IsUnitInTransport(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsUnitLoaded(jHANDLE  HANDLE_1);
bool    IsHeroUnitId(int      integer_1);
bool    IsUnitIdType(int      integer_1, jHANDLE  HANDLE_2);
jHANDLE GetOwningPlayer(jHANDLE  HANDLE_1);
void    UnitShareVision(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, bool     BOOL_3);
void    UnitSuspendDecay(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    UnitAddType(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    UnitRemoveType(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    UnitAddAbility(jHANDLE  HANDLE_1, int      integer_2);
bool    UnitRemoveAbility(jHANDLE  HANDLE_1, int      integer_2);
bool    UnitMakeAbilityPermanent(jHANDLE  HANDLE_1, bool     BOOL_2, int      integer_3);
bool    UnitHasBuffsEx(jHANDLE  HANDLE_1, bool     BOOL_2, bool     BOOL_3, bool     BOOL_4, bool     BOOL_5, bool     BOOL_6, bool     BOOL_7, bool     BOOL_8);
int     UnitCountBuffsEx(jHANDLE  HANDLE_1, bool     BOOL_2, bool     BOOL_3, bool     BOOL_4, bool     BOOL_5, bool     BOOL_6, bool     BOOL_7, bool     BOOL_8);
void    UnitRemoveBuffs(jHANDLE  HANDLE_1, bool     BOOL_2, bool     BOOL_3);
void    UnitRemoveBuffsEx(jHANDLE  HANDLE_1, bool     BOOL_2, bool     BOOL_3, bool     BOOL_4, bool     BOOL_5, bool     BOOL_6, bool     BOOL_7, bool     BOOL_8);
void    UnitAddSleep(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    UnitCanSleep(jHANDLE  HANDLE_1);
void    UnitAddSleepPerm(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    UnitCanSleepPerm(jHANDLE  HANDLE_1);
bool    UnitIsSleeping(jHANDLE  HANDLE_1);
void    UnitWakeUp(jHANDLE  HANDLE_1);
void    UnitApplyTimedLife(jHANDLE  HANDLE_1, int      integer_2, float   real_3);
bool    UnitIgnoreAlarm(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    UnitIgnoreAlarmToggled(jHANDLE  HANDLE_1);
bool    UnitDamagePoint(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4, float   real_5, float   real_6, bool     BOOL_7, bool     BOOL_8, jHANDLE  HANDLE_9, jHANDLE  HANDLE_10, jHANDLE  HANDLE_11);
bool    UnitDamageTarget(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3, bool     BOOL_4, bool     BOOL_5, jHANDLE  HANDLE_6, jHANDLE  HANDLE_7, jHANDLE  HANDLE_8);
int     DecUnitAbilityLevel(jHANDLE  HANDLE_1, int      integer_2);
int     IncUnitAbilityLevel(jHANDLE  HANDLE_1, int      integer_2);
int     SetUnitAbilityLevel(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
void    UnitResetCooldown(jHANDLE  HANDLE_1);
void    UnitSetConstructionProgress(jHANDLE  HANDLE_1, int      integer_2);
void    UnitSetUpgradeProgress(jHANDLE  HANDLE_1, int      integer_2);
void    UnitPauseTimedLife(jHANDLE  HANDLE_1, bool     BOOL_2);
void    UnitSetUsesAltIcon(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IssueImmediateOrderById(jHANDLE  HANDLE_1, int      integer_2);
bool    IssuePointOrderById(jHANDLE  HANDLE_1, int      integer_2, float   real_3, float   real_4);
bool    IssuePointOrderByIdLoc(jHANDLE  HANDLE_1, int      integer_2, jHANDLE  HANDLE_3);
bool    IssueTargetOrderById(jHANDLE  HANDLE_1, int      integer_2, jHANDLE  HANDLE_3);
bool    IssueInstantPointOrderById(jHANDLE  HANDLE_1, int      integer_2, float   real_3, float   real_4, jHANDLE  HANDLE_5);
bool    IssueInstantTargetOrderById(jHANDLE  HANDLE_1, int      integer_2, jHANDLE  HANDLE_3, jHANDLE  HANDLE_4);
bool    IssueBuildOrderById(jHANDLE  HANDLE_1, int      integer_2, float   real_3, float   real_4);
bool    IssueNeutralImmediateOrderById(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, int      integer_3);
bool    IssueNeutralPointOrderById(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, int      integer_3, float   real_4, float   real_5);
bool    IssueNeutralTargetOrderById(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, int      integer_3, jHANDLE  HANDLE_4);
bool    IssueImmediateOrder(jHANDLE  HANDLE_1, const char* STRING_2);
bool    IssuePointOrder(jHANDLE  HANDLE_1, const char* STRING_2, float   real_3, float   real_4);
bool    IssuePointOrderLoc(jHANDLE  HANDLE_1, const char* STRING_2, jHANDLE  HANDLE_3);
bool    IssueTargetOrder(jHANDLE  HANDLE_1, const char* STRING_2, jHANDLE  HANDLE_3);
bool    IssueInstantPointOrder(jHANDLE  HANDLE_1, const char* STRING_2, float   real_3, float   real_4, jHANDLE  HANDLE_5);
bool    IssueInstantTargetOrder(jHANDLE  HANDLE_1, const char* STRING_2, jHANDLE  HANDLE_3, jHANDLE  HANDLE_4);
bool    IssueBuildOrder(jHANDLE  HANDLE_1, const char* STRING_2, float   real_3, float   real_4);
bool    IssueNeutralImmediateOrder(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, const char* STRING_3);
bool    IssueNeutralPointOrder(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, const char* STRING_3, float   real_4, float   real_5);
bool    IssueNeutralTargetOrder(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, const char* STRING_3, jHANDLE  HANDLE_4);
float   WaygateGetDestinationX(jHANDLE  HANDLE_1);
float   WaygateGetDestinationY(jHANDLE  HANDLE_1);
void    WaygateSetDestination(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    WaygateActivate(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    WaygateIsActive(jHANDLE  HANDLE_1);
void    AddItemToAllStock(int      integer_1, int      integer_2, int      integer_3);
void    AddItemToStock(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4);
void    AddUnitToAllStock(int      integer_1, int      integer_2, int      integer_3);
void    AddUnitToStock(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4);
void    RemoveItemFromAllStock(int      integer_1);
void    RemoveItemFromStock(jHANDLE  HANDLE_1, int      integer_2);
void    RemoveUnitFromAllStock(int      integer_1);
void    RemoveUnitFromStock(jHANDLE  HANDLE_1, int      integer_2);
void    SetAllItemTypeSlots(int      integer_1);
void    SetAllUnitTypeSlots(int      integer_1);
void    SetItemTypeSlots(jHANDLE  HANDLE_1, int      integer_2);
void    SetUnitTypeSlots(jHANDLE  HANDLE_1, int      integer_2);
int     GetUnitUserData(jHANDLE  HANDLE_1);
void    SetUnitUserData(jHANDLE  HANDLE_1, int      integer_2);
jHANDLE CreateItem(int      integer_1, float   real_2, float   real_3);
void    RemoveItem(jHANDLE  HANDLE_1);
jHANDLE GetItemPlayer(jHANDLE  HANDLE_1);
int     GetItemTypeId(jHANDLE  HANDLE_1);
float   GetItemX(jHANDLE  HANDLE_1);
float   GetItemY(jHANDLE  HANDLE_1);
void    SetItemPosition(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    SetItemDropOnDeath(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetItemDroppable(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetItemPawnable(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetItemPlayer(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, bool     BOOL_3);
void    SetItemInvulnerable(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsItemInvulnerable(jHANDLE  HANDLE_1);
int     GetItemLevel(jHANDLE  HANDLE_1);
jHANDLE GetItemType(jHANDLE  HANDLE_1);
void    SetItemVisible(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsItemVisible(jHANDLE  HANDLE_1);
void    EnumItemsInRect(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jCODE     jCODE_3);
bool    IsItemOwned(jHANDLE  HANDLE_1);
bool    IsItemPowerup(jHANDLE  HANDLE_1);
bool    IsItemSellable(jHANDLE  HANDLE_1);
bool    IsItemPawnable(jHANDLE  HANDLE_1);
bool    IsItemIdPowerup(int      integer_1);
bool    IsItemIdSellable(int      integer_1);
bool    IsItemIdPawnable(int      integer_1);
void    SetItemDropID(jHANDLE  HANDLE_1, int      integer_2);
const char* GetItemName(jHANDLE  HANDLE_1);
int     GetItemCharges(jHANDLE  HANDLE_1);
void    SetItemCharges(jHANDLE  HANDLE_1, int      integer_2);
int     GetItemUserData(jHANDLE  HANDLE_1);
void    SetItemUserData(jHANDLE  HANDLE_1, int      integer_2);
jHANDLE Player(int      integer_1);
jHANDLE GetLocalPlayer();
bool    IsPlayerAlly(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsPlayerEnemy(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsPlayerInForce(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsPlayerObserver(jHANDLE  HANDLE_1);
jHANDLE GetPlayerRace(jHANDLE  HANDLE_1);
int     GetPlayerId(jHANDLE  HANDLE_1);
void    SetPlayerTechMaxAllowed(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
int     GetPlayerTechMaxAllowed(jHANDLE  HANDLE_1, int      integer_2);
void    AddPlayerTechResearched(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
void    SetPlayerTechResearched(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
bool    GetPlayerTechResearched(jHANDLE  HANDLE_1, int      integer_2, bool     BOOL_3);
int     GetPlayerTechCount(jHANDLE  HANDLE_1, int      integer_2, bool     BOOL_3);
void    SetPlayerAbilityAvailable(jHANDLE  HANDLE_1, int      integer_2, bool     BOOL_3);
int     GetPlayerUnitCount(jHANDLE  HANDLE_1, bool     BOOL_2);
int     GetPlayerTypedUnitCount(jHANDLE  HANDLE_1, const char* STRING_2, bool     BOOL_3, bool     BOOL_4);
int     GetPlayerStructureCount(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsVisibleToPlayer(float   real_1, float   real_2, jHANDLE  HANDLE_3);
bool    IsLocationVisibleToPlayer(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsFoggedToPlayer(float   real_1, float   real_2, jHANDLE  HANDLE_3);
bool    IsLocationFoggedToPlayer(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    IsMaskedToPlayer(float   real_1, float   real_2, jHANDLE  HANDLE_3);
bool    IsLocationMaskedToPlayer(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    SetPlayerState(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, int      integer_3);
int     GetPlayerState(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
int     GetPlayerScore(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
bool    GetPlayerAlliance(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
void    RemovePlayer(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    CachePlayerHeroData(jHANDLE  HANDLE_1);
float   GetPlayerHandicap(jHANDLE  HANDLE_1);
void    SetPlayerHandicap(jHANDLE  HANDLE_1, float   real_2);
float   GetPlayerHandicapXP(jHANDLE  HANDLE_1);
void    SetPlayerHandicapXP(jHANDLE  HANDLE_1, float   real_2);
void    SetPlayerUnitsOwner(jHANDLE  HANDLE_1, int      integer_2);
void    CripplePlayer(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, bool     BOOL_3);
jHANDLE VersionGet();
bool    VersionCompatible(jHANDLE  HANDLE_1);
bool    VersionSupported(jHANDLE  HANDLE_1);
void    EndGame(bool     BOOL_1);
void    ChangeLevel(const char* STRING_1, bool     BOOL_2);
void    RestartGame(bool     BOOL_1);
void    ReloadGame();
void    LoadGame(const char* STRING_1, bool     BOOL_2);
void    SaveGame(const char* STRING_1);
bool    RenameSaveDirectory(const char* STRING_1, const char* STRING_2);
bool    RemoveSaveDirectory(const char* STRING_1);
bool    CopySaveGame(const char* STRING_1, const char* STRING_2);
bool    SaveGameExists(const char* STRING_1);
void    SetFloatGameState(jHANDLE  HANDLE_1, float   real_2);
float   GetFloatGameState(jHANDLE  HANDLE_1);
void    SetIntegerGameState(jHANDLE  HANDLE_1, int      integer_2);
int     GetIntegerGameState(jHANDLE  HANDLE_1);
void    SyncSelections();
jHANDLE DialogCreate();
void    DialogDestroy(jHANDLE  HANDLE_1);
void    DialogSetAsync(jHANDLE  HANDLE_1);
void    DialogClear(jHANDLE  HANDLE_1);
void    DialogSetMessage(jHANDLE  HANDLE_1, const char* STRING_2);
jHANDLE DialogAddButton(jHANDLE  HANDLE_1, const char* STRING_2, int      integer_3);
jHANDLE DialogAddQuitButton(jHANDLE  HANDLE_1, bool     BOOL_2, const char* STRING_3, int      integer_4);
void    DialogDisplay(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, bool     BOOL_3);
void    SetMissionAvailable(int      integer_1, int      integer_2, bool     BOOL_3);
void    SetCampaignAvailable(int      integer_1, bool     BOOL_2);
void    SetCampaignMenuRace(jHANDLE  HANDLE_1);
void    SetCampaignMenuRaceEx(int      integer_1);
void    ForceCampaignSelectScreen();
void    SetOpCinematicAvailable(int      integer_1, bool     BOOL_2);
void    SetEdCinematicAvailable(int      integer_1, bool     BOOL_2);
void    SetTutorialCleared(bool     BOOL_1);
jHANDLE GetDefaultDifficulty();
void    SetDefaultDifficulty(jHANDLE  HANDLE_1);
bool    ReloadGameCachesFromDisk();
void    SetCustomCampaignButtonVisible(int      integer_1, bool     BOOL_2);
bool    GetCustomCampaignButtonVisible(int      integer_1);
void    DoNotSaveReplay();
jHANDLE InitGameCache(const char* STRING_1);
bool    SaveGameCache(jHANDLE  HANDLE_1);
void    StoreInteger(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3, int      integer_4);
void    StoreReal(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3, float   real_4);
void    StoreBoolean(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3, bool     BOOL_4);
bool    StoreUnit(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3, jHANDLE  HANDLE_4);
bool    StoreString(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3, const char* STRING_4);
void    SaveInteger(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4);
void    SaveReal(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, float   real_4);
void    SaveBoolean(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, bool     BOOL_4);
bool    SaveStr(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, const char* STRING_4);
bool    SavePlayerHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveWidgetHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveDestructableHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveItemHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveUnitHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveAbilityHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveTimerHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveRegionHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveTriggerHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveTriggerConditionHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveTriggerActionHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveTriggerEventHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveForceHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveGroupHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveLocationHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveRectHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveBooleanExprHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveSoundHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveEffectHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveUnitPoolHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveItemPoolHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveQuestHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveQuestItemHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveDefeatConditionHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveTimerDialogHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveLeaderboardHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveMultiboardHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveMultiboardItemHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveTrackableHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveDialogHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveButtonHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveTextTagHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveLightningHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveImageHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveUbersplatHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveFogStateHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveFogModifierHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveAgentHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
bool    SaveHashtableHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, jHANDLE  HANDLE_4);
void    SyncStoredInteger(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
void    SyncStoredReal(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
void    SyncStoredBoolean(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
void    SyncStoredUnit(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
void    SyncStoredString(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
int     GetStoredInteger(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
float   GetStoredReal(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
bool    GetStoredBoolean(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
jHANDLE RestoreUnit(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3, jHANDLE  HANDLE_4, float   real_5, float   real_6, float   real_7);
const char* GetStoredString(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
bool    HaveStoredInteger(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
bool    HaveStoredReal(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
bool    HaveStoredBoolean(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
bool    HaveStoredUnit(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
bool    HaveStoredString(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
void    FlushGameCache(jHANDLE  HANDLE_1);
void    FlushStoredMission(jHANDLE  HANDLE_1, const char* STRING_2);
void    FlushStoredInteger(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
void    FlushStoredReal(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
void    FlushStoredBoolean(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
void    FlushStoredUnit(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
void    FlushStoredString(jHANDLE  HANDLE_1, const char* STRING_2, const char* STRING_3);
jHANDLE InitHashtable();
int     LoadInteger(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
float   LoadReal(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
bool    LoadBoolean(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
const char* LoadStr(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadPlayerHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadWidgetHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadDestructableHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadItemHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadUnitHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadAbilityHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadTimerHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadRegionHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadTriggerHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadTriggerConditionHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadTriggerActionHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadTriggerEventHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadForceHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadGroupHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadLocationHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadRectHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadBooleanExprHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadSoundHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadEffectHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadUnitPoolHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadItemPoolHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadQuestHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadQuestItemHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadDefeatConditionHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadTimerDialogHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadLeaderboardHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadMultiboardHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadMultiboardItemHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadTrackableHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadDialogHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadButtonHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadTextTagHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadLightningHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadImageHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadUbersplatHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadFogStateHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadFogModifierHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
jHANDLE LoadHashtableHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
bool    HaveSavedInteger(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
bool    HaveSavedReal(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
bool    HaveSavedBoolean(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
bool    HaveSavedString(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
bool    HaveSavedHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
void    RemoveSavedInteger(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
void    RemoveSavedReal(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
void    RemoveSavedBoolean(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
void    RemoveSavedString(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
void    RemoveSavedHandle(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
void    FlushParentHashtable(jHANDLE  HANDLE_1);
void    FlushChildHashtable(jHANDLE  HANDLE_1, int      integer_2);
int     GetRandomInt(int      integer_1, int      integer_2);
float   GetRandomReal(float   real_1, float   real_2);
jHANDLE CreateUnitPool();
void    DestroyUnitPool(jHANDLE  HANDLE_1);
void    UnitPoolAddUnitType(jHANDLE  HANDLE_1, int      integer_2, float   real_3);
void    UnitPoolRemoveUnitType(jHANDLE  HANDLE_1, int      integer_2);
jHANDLE PlaceRandomUnit(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3, float   real_4, float   real_5);
jHANDLE CreateItemPool();
void    DestroyItemPool(jHANDLE  HANDLE_1);
void    ItemPoolAddItemType(jHANDLE  HANDLE_1, int      integer_2, float   real_3);
void    ItemPoolRemoveItemType(jHANDLE  HANDLE_1, int      integer_2);
jHANDLE PlaceRandomItem(jHANDLE  HANDLE_1, float   real_2, float   real_3);
int     ChooseRandomCreep(int      integer_1);
int     ChooseRandomNPBuilding();
int     ChooseRandomItem(int      integer_1);
int     ChooseRandomItemEx(jHANDLE  HANDLE_1, int      integer_2);
void    SetRandomSeed(int      integer_1);
void    DisplayTextToPlayer(jHANDLE  HANDLE_1, float   real_2, float   real_3, const char* STRING_4);
void    DisplayTimedTextToPlayer(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4, const char* STRING_5);
void    DisplayTimedTextFromPlayer(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4, const char* STRING_5);
void    ClearTextMessages();
void    EnableUserControl(bool     BOOL_1);
void    EnableUserUI(bool     BOOL_1);
void    DisableRestartMission(bool     BOOL_1);
void    ForceUIKey(const char* STRING_1);
void    ForceUICancel();
void    DisplayLoadDialog();
void    SetTerrainFog(float   real_1, float   real_2, float   real_3, float   real_4, float   real_5);
void    SetUnitFog(float   real_1, float   real_2, float   real_3, float   real_4, float   real_5);
void    SetTerrainFogEx(int      integer_1, float   real_2, float   real_3, float   real_4, float   real_5, float   real_6, float   real_7);
void    ResetTerrainFog();
void    SetDayNightModels(const char* STRING_1, const char* STRING_2);
void    SetSkyModel(const char* STRING_1);
void    SuspendTimeOfDay(bool     BOOL_1);
void    SetTimeOfDayScale(float   real_1);
float   GetTimeOfDayScale();
void    ShowInterface(bool     BOOL_1, float   real_2);
void    PauseGame(bool     BOOL_1);
void    PingMinimap(float   real_1, float   real_2, float   real_3);
void    PingMinimapEx(float   real_1, float   real_2, float   real_3, int      integer_4, int      integer_5, int      integer_6, bool     BOOL_7);
void    SetIntroShotText(const char* STRING_1);
void    SetIntroShotModel(const char* STRING_1);
void    EnableOcclusion(bool     BOOL_1);
void    EnableWorldFogBoundary(bool     BOOL_1);
void    PlayModelCinematic(const char* STRING_1);
void    PlayCinematic(const char* STRING_1);
void    SetAltMinimapIcon(const char* STRING_1);
jHANDLE CreateTextTag();
void    DestroyTextTag(jHANDLE  HANDLE_1);
void    SetTextTagText(jHANDLE  HANDLE_1, const char* STRING_2, float   real_3);
void    SetTextTagPos(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4);
void    SetTextTagPosUnit(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3);
void    SetTextTagColor(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5);
void    SetTextTagVelocity(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    SetTextTagVisibility(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetTextTagSuspended(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetTextTagPermanent(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetTextTagAge(jHANDLE  HANDLE_1, float   real_2);
void    SetTextTagLifespan(jHANDLE  HANDLE_1, float   real_2);
void    SetTextTagFadepoint(jHANDLE  HANDLE_1, float   real_2);
void    SetReservedLocalHeroButtons(int      integer_1);
int     GetAllyColorFilterState();
void    SetAllyColorFilterState(int      integer_1);
bool    GetCreepCampFilterState();
void    SetCreepCampFilterState(bool     BOOL_1);
void    EnableMinimapFilterButtons(bool     BOOL_1, bool     BOOL_2);
void    EnableDragSelect(bool     BOOL_1, bool     BOOL_2);
void    EnablePreSelect(bool     BOOL_1, bool     BOOL_2);
void    EnableSelect(bool     BOOL_1, bool     BOOL_2);
jHANDLE CreateTrackable(const char* STRING_1, float   real_2, float   real_3, float   real_4);
jHANDLE TriggerRegisterTrackableHitEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE TriggerRegisterTrackableTrackEvent(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE GetTriggeringTrackable();
jHANDLE CreateQuest();
void    DestroyQuest(jHANDLE  HANDLE_1);
void    QuestSetTitle(jHANDLE  HANDLE_1, const char* STRING_2);
void    QuestSetDescription(jHANDLE  HANDLE_1, const char* STRING_2);
void    QuestSetIconPath(jHANDLE  HANDLE_1, const char* STRING_2);
void    QuestSetRequired(jHANDLE  HANDLE_1, bool     BOOL_2);
void    QuestSetCompleted(jHANDLE  HANDLE_1, bool     BOOL_2);
void    QuestSetDiscovered(jHANDLE  HANDLE_1, bool     BOOL_2);
void    QuestSetFailed(jHANDLE  HANDLE_1, bool     BOOL_2);
void    QuestSetEnabled(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsQuestRequired(jHANDLE  HANDLE_1);
bool    IsQuestCompleted(jHANDLE  HANDLE_1);
bool    IsQuestDiscovered(jHANDLE  HANDLE_1);
bool    IsQuestFailed(jHANDLE  HANDLE_1);
bool    IsQuestEnabled(jHANDLE  HANDLE_1);
jHANDLE QuestCreateItem(jHANDLE  HANDLE_1);
void    QuestItemSetDescription(jHANDLE  HANDLE_1, const char* STRING_2);
void    QuestItemSetCompleted(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsQuestItemCompleted(jHANDLE  HANDLE_1);
jHANDLE CreateDefeatCondition();
void    DestroyDefeatCondition(jHANDLE  HANDLE_1);
void    DefeatConditionSetDescription(jHANDLE  HANDLE_1, const char* STRING_2);
void    FlashQuestDialogButton();
void    ForceQuestDialogUpdate();
jHANDLE CreateTimerDialog(jHANDLE  HANDLE_1);
void    DestroyTimerDialog(jHANDLE  HANDLE_1);
void    TimerDialogSetTitle(jHANDLE  HANDLE_1, const char* STRING_2);
void    TimerDialogSetTitleColor(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5);
void    TimerDialogSetTimeColor(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5);
void    TimerDialogSetSpeed(jHANDLE  HANDLE_1, float   real_2);
void    TimerDialogDisplay(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsTimerDialogDisplayed(jHANDLE  HANDLE_1);
void    TimerDialogSetRealTimeRemaining(jHANDLE  HANDLE_1, float   real_2);
jHANDLE CreateLeaderboard();
void    DestroyLeaderboard(jHANDLE  HANDLE_1);
int     LeaderboardGetItemCount(jHANDLE  HANDLE_1);
void    LeaderboardSetSizeByItemCount(jHANDLE  HANDLE_1, int      integer_2);
void    LeaderboardAddItem(jHANDLE  HANDLE_1, const char* STRING_2, int      integer_3, jHANDLE  HANDLE_4);
void    LeaderboardRemoveItem(jHANDLE  HANDLE_1, int      integer_2);
void    LeaderboardRemovePlayerItem(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    LeaderboardSortItemsByValue(jHANDLE  HANDLE_1, bool     BOOL_2);
void    LeaderboardSortItemsByPlayer(jHANDLE  HANDLE_1, bool     BOOL_2);
void    LeaderboardSortItemsByLabel(jHANDLE  HANDLE_1, bool     BOOL_2);
void    LeaderboardClear(jHANDLE  HANDLE_1);
void    LeaderboardDisplay(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsLeaderboardDisplayed(jHANDLE  HANDLE_1);
const char* LeaderboardGetLabelText(jHANDLE  HANDLE_1);
void    PlayerSetLeaderboard(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
jHANDLE PlayerGetLeaderboard(jHANDLE  HANDLE_1);
bool    LeaderboardHasPlayerItem(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
int     LeaderboardGetPlayerIndex(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    LeaderboardSetLabel(jHANDLE  HANDLE_1, const char* STRING_2);
void    LeaderboardSetLabelColor(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5);
void    LeaderboardSetValueColor(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5);
void    LeaderboardSetStyle(jHANDLE  HANDLE_1, bool     BOOL_2, bool     BOOL_3, bool     BOOL_4, bool     BOOL_5);
void    LeaderboardSetItemValue(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
void    LeaderboardSetItemLabel(jHANDLE  HANDLE_1, int      integer_2, const char* STRING_3);
void    LeaderboardSetItemStyle(jHANDLE  HANDLE_1, int      integer_2, bool     BOOL_3, bool     BOOL_4, bool     BOOL_5);
void    LeaderboardSetItemLabelColor(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5, int      integer_6);
void    LeaderboardSetItemValueColor(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5, int      integer_6);
jHANDLE CreateMultiboard();
void    DestroyMultiboard(jHANDLE  HANDLE_1);
void    MultiboardDisplay(jHANDLE  HANDLE_1, bool     BOOL_2);
void    MultiboardMinimize(jHANDLE  HANDLE_1, bool     BOOL_2);
bool    IsMultiboardDisplayed(jHANDLE  HANDLE_1);
bool    IsMultiboardMinimized(jHANDLE  HANDLE_1);
void    MultiboardClear(jHANDLE  HANDLE_1);
void    MultiboardSetTitleText(jHANDLE  HANDLE_1, const char* STRING_2);
const char* MultiboardGetTitleText(jHANDLE  HANDLE_1);
void    MultiboardSetTitleTextColor(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5);
int     MultiboardGetRowCount(jHANDLE  HANDLE_1);
int     MultiboardGetColumnCount(jHANDLE  HANDLE_1);
void    MultiboardSetColumnCount(jHANDLE  HANDLE_1, int      integer_2);
void    MultiboardSetRowCount(jHANDLE  HANDLE_1, int      integer_2);
void    MultiboardSetItemsStyle(jHANDLE  HANDLE_1, bool     BOOL_2, bool     BOOL_3);
void    MultiboardSetItemsValueColor(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5);
void    MultiboardSetItemsValue(jHANDLE  HANDLE_1, const char* STRING_2);
void    MultiboardSetItemsWidth(jHANDLE  HANDLE_1, float   real_2);
void    MultiboardSetItemsIcon(jHANDLE  HANDLE_1, const char* STRING_2);
jHANDLE MultiboardGetItem(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
void    MultiboardReleaseItem(jHANDLE  HANDLE_1);
void    MultiboardSetItemStyle(jHANDLE  HANDLE_1, bool     BOOL_2, bool     BOOL_3);
void    MultiboardSetItemValue(jHANDLE  HANDLE_1, const char* STRING_2);
void    MultiboardSetItemValueColor(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5);
void    MultiboardSetItemWidth(jHANDLE  HANDLE_1, float   real_2);
void    MultiboardSetItemIcon(jHANDLE  HANDLE_1, const char* STRING_2);
void    MultiboardSuppressDisplay(bool     BOOL_1);
void    SetCameraBounds(float   real_1, float   real_2, float   real_3, float   real_4, float   real_5, float   real_6, float   real_7, float   real_8);
void    SetCameraPosition(float   real_1, float   real_2);
void    SetCameraQuickPosition(float   real_1, float   real_2);
void    ResetToGameCamera(float   real_1);
void    StopCamera();
void    PanCameraTo(float   real_1, float   real_2);
void    PanCameraToTimed(float   real_1, float   real_2, float   real_3);
void    PanCameraToWithZ(float   real_1, float   real_2, float   real_3);
void    PanCameraToTimedWithZ(float   real_1, float   real_2, float   real_3, float   real_4);
void    SetCinematicCamera(const char* STRING_1);
void    SetCameraField(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    AdjustCameraField(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    SetCameraTargetController(jHANDLE  HANDLE_1, float   real_2, float   real_3, bool     BOOL_4);
void    SetCameraOrientController(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    SetCameraRotateMode(float   real_1, float   real_2, float   real_3, float   real_4);
jHANDLE CreateCameraSetup();
void    CameraSetupSetField(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3, float   real_4);
float   CameraSetupGetField(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    CameraSetupSetDestPosition(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4);
jHANDLE CameraSetupGetDestPositionLoc(jHANDLE  HANDLE_1);
float   CameraSetupGetDestPositionX(jHANDLE  HANDLE_1);
float   CameraSetupGetDestPositionY(jHANDLE  HANDLE_1);
void    CameraSetupApply(jHANDLE  HANDLE_1, bool     BOOL_2, bool     BOOL_3);
void    CameraSetupApplyWithZ(jHANDLE  HANDLE_1, float   real_2);
void    CameraSetupApplyForceDuration(jHANDLE  HANDLE_1, bool     BOOL_2, float   real_3);
void    CameraSetupApplyForceDurationWithZ(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    CameraSetTargetNoise(float   real_1, float   real_2);
void    CameraSetSourceNoise(float   real_1, float   real_2);
void    CameraSetTargetNoiseEx(float   real_1, float   real_2, bool     BOOL_3);
void    CameraSetSourceNoiseEx(float   real_1, float   real_2, bool     BOOL_3);
void    CameraSetSmoothingFactor(float   real_1);
float   GetCameraMargin(int      integer_1);
float   GetCameraBoundMinX();
float   GetCameraBoundMinY();
float   GetCameraBoundMaxX();
float   GetCameraBoundMaxY();
float   GetCameraField(jHANDLE  HANDLE_1);
float   GetCameraTargetPositionX();
float   GetCameraTargetPositionY();
float   GetCameraTargetPositionZ();
jHANDLE GetCameraTargetPositionLoc();
float   GetCameraEyePositionX();
float   GetCameraEyePositionY();
float   GetCameraEyePositionZ();
jHANDLE GetCameraEyePositionLoc();
void    SetCineFilterTexture(const char* STRING_1);
void    SetCineFilterBlendMode(jHANDLE  HANDLE_1);
void    SetCineFilterTexMapFlags(jHANDLE  HANDLE_1);
void    SetCineFilterStartUV(float   real_1, float   real_2, float   real_3, float   real_4);
void    SetCineFilterEndUV(float   real_1, float   real_2, float   real_3, float   real_4);
void    SetCineFilterStartColor(int      integer_1, int      integer_2, int      integer_3, int      integer_4);
void    SetCineFilterEndColor(int      integer_1, int      integer_2, int      integer_3, int      integer_4);
void    SetCineFilterDuration(float   real_1);
void    DisplayCineFilter(bool     BOOL_1);
bool    IsCineFilterDisplayed();
void    SetCinematicScene(int      integer_1, jHANDLE  HANDLE_2, const char* STRING_3, const char* STRING_4, float   real_5, float   real_6);
void    EndCinematicScene();
void    ForceCinematicSubtitles(bool     BOOL_1);
void    NewSoundEnvironment(const char* STRING_1);
jHANDLE CreateSound(const char* STRING_1, bool     BOOL_2, bool     BOOL_3, bool     BOOL_4, int      integer_5, int      integer_6, const char* STRING_7);
jHANDLE CreateSoundFilenameWithLabel(const char* STRING_1, bool     BOOL_2, bool     BOOL_3, bool     BOOL_4, int      integer_5, int      integer_6, const char* STRING_7);
jHANDLE CreateSoundFromLabel(const char* STRING_1, bool     BOOL_2, bool     BOOL_3, bool     BOOL_4, int      integer_5, int      integer_6);
jHANDLE CreateMIDISound(const char* STRING_1, int      integer_2, int      integer_3);
void    SetStackedSound(const char* STRING_1, float   real_2, float   real_3);
void    ClearStackedSound(const char* STRING_1, float   real_2, float   real_3);
void    SetStackedSoundRect(const char* STRING_1, jHANDLE  HANDLE_2);
void    ClearStackedSoundRect(const char* STRING_1, jHANDLE  HANDLE_2);
void    SetSoundParamsFromLabel(jHANDLE  HANDLE_1, const char* STRING_2);
void    SetSoundChannel(jHANDLE  HANDLE_1, int      integer_2);
void    SetSoundVolume(jHANDLE  HANDLE_1, int      integer_2);
void    SetSoundPitch(jHANDLE  HANDLE_1, float   real_2);
void    SetSoundPlayPosition(jHANDLE  HANDLE_1, int      integer_2);
void    SetSoundDistances(jHANDLE  HANDLE_1, float   real_2, float   real_3);
void    SetSoundDistanceCutoff(jHANDLE  HANDLE_1, float   real_2);
void    SetSoundConeAngles(jHANDLE  HANDLE_1, float   real_2, float   real_3, int      integer_4);
void    SetSoundConeOrientation(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4);
void    SetSoundPosition(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4);
void    SetSoundVelocity(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4);
void    AttachSoundToUnit(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2);
void    StartSound(jHANDLE  HANDLE_1);
void    StopSound(jHANDLE  HANDLE_1, bool     BOOL_2, bool     BOOL_3);
void    KillSoundWhenDone(jHANDLE  HANDLE_1);
void    SetMapMusic(const char* STRING_1, bool     BOOL_2, int      integer_3);
void    ClearMapMusic();
void    PlayMusic(const char* STRING_1);
void    PlayMusicEx(const char* STRING_1, int      integer_2, int      integer_3);
void    StopMusic(bool     BOOL_1);
void    ResumeMusic();
void    PlayThematicMusic(const char* STRING_1);
void    PlayThematicMusicEx(const char* STRING_1, int      integer_2);
void    EndThematicMusic();
void    SetMusicVolume(int      integer_1);
void    SetMusicPlayPosition(int      integer_1);
void    SetThematicMusicPlayPosition(int      integer_1);
void    SetSoundDuration(jHANDLE  HANDLE_1, int      integer_2);
int     GetSoundDuration(jHANDLE  HANDLE_1);
int     GetSoundFileDuration(const char* STRING_1);
void    VolumeGroupSetVolume(jHANDLE  HANDLE_1, float   real_2);
void    VolumeGroupReset();
bool    GetSoundIsPlaying(jHANDLE  HANDLE_1);
bool    GetSoundIsLoading(jHANDLE  HANDLE_1);
void    RegisterStackedSound(jHANDLE  HANDLE_1, bool     BOOL_2, float   real_3, float   real_4);
void    UnregisterStackedSound(jHANDLE  HANDLE_1, bool     BOOL_2, float   real_3, float   real_4);
jHANDLE AddWeatherEffect(jHANDLE  HANDLE_1, int      integer_2);
void    RemoveWeatherEffect(jHANDLE  HANDLE_1);
void    EnableWeatherEffect(jHANDLE  HANDLE_1, bool     BOOL_2);
jHANDLE TerrainDeformCrater(float   real_1, float   real_2, float   real_3, float   real_4, int      integer_5, bool     BOOL_6);
jHANDLE TerrainDeformRipple(float   real_1, float   real_2, float   real_3, float   real_4, int      integer_5, int      integer_6, float   real_7, float   real_8, float   real_9, bool     BOOL_10);
jHANDLE TerrainDeformWave(float   real_1, float   real_2, float   real_3, float   real_4, float   real_5, float   real_6, float   real_7, float   real_8, int      integer_9, int      integer_10);
jHANDLE TerrainDeformRandom(float   real_1, float   real_2, float   real_3, float   real_4, float   real_5, int      integer_6, int      integer_7);
void    TerrainDeformStop(jHANDLE  HANDLE_1, int      integer_2);
void    TerrainDeformStopAll();
void    DestroyEffect(jHANDLE  HANDLE_1);
jHANDLE AddSpecialEffect(const char* STRING_1, float   real_2, float   real_3);
jHANDLE AddSpecialEffectLoc(const char* STRING_1, jHANDLE  HANDLE_2);
jHANDLE AddSpecialEffectTarget(const char* STRING_1, jHANDLE  HANDLE_2, const char* STRING_3);
jHANDLE AddSpellEffect(const char* STRING_1, jHANDLE  HANDLE_2, float   real_3, float   real_4);
jHANDLE AddSpellEffectLoc(const char* STRING_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
jHANDLE AddSpellEffectById(int      integer_1, jHANDLE  HANDLE_2, float   real_3, float   real_4);
jHANDLE AddSpellEffectByIdLoc(int      integer_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3);
jHANDLE AddSpellEffectTarget(const char* STRING_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, const char* STRING_4);
jHANDLE AddSpellEffectTargetById(int      integer_1, jHANDLE  HANDLE_2, jHANDLE  HANDLE_3, const char* STRING_4);
jHANDLE AddLightning(const char* STRING_1, bool     BOOL_2, float   real_3, float   real_4, float   real_5, float   real_6);
jHANDLE AddLightningEx(const char* STRING_1, bool     BOOL_2, float   real_3, float   real_4, float   real_5, float   real_6, float   real_7, float   real_8);
bool    DestroyLightning(jHANDLE  HANDLE_1);
float   GetLightningColorA(jHANDLE  HANDLE_1);
float   GetLightningColorR(jHANDLE  HANDLE_1);
float   GetLightningColorG(jHANDLE  HANDLE_1);
float   GetLightningColorB(jHANDLE  HANDLE_1);
bool    MoveLightning(jHANDLE  HANDLE_1, bool     BOOL_2, float   real_3, float   real_4, float   real_5, float   real_6);
bool    MoveLightningEx(jHANDLE  HANDLE_1, bool     BOOL_2, float   real_3, float   real_4, float   real_5, float   real_6, float   real_7, float   real_8);
bool    SetLightningColor(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4, float   real_5);
const char* GetAbilityEffect(const char* STRING_1, jHANDLE  HANDLE_2, int      integer_3);
const char* GetAbilityEffectById(int      integer_1, jHANDLE  HANDLE_2, int      integer_3);
const char* GetAbilitySound(const char* STRING_1, jHANDLE  HANDLE_2);
const char* GetAbilitySoundById(int      integer_1, jHANDLE  HANDLE_2);
int     GetTerrainCliffLevel(float   real_1, float   real_2);
void    SetWaterBaseColor(int      integer_1, int      integer_2, int      integer_3, int      integer_4);
void    SetWaterDeforms(bool     BOOL_1);
int     GetTerrainType(float   real_1, float   real_2);
int     GetTerrainVariance(float   real_1, float   real_2);
void    SetTerrainType(float   real_1, float   real_2, int      integer_3, int      integer_4, int      integer_5, int      integer_6);
bool    IsTerrainPathable(float   real_1, float   real_2, jHANDLE  HANDLE_3);
void    SetTerrainPathable(float   real_1, float   real_2, jHANDLE  HANDLE_3, bool     BOOL_4);
jHANDLE CreateImage(const char* STRING_1, float   real_2, float   real_3, float   real_4, float   real_5, float   real_6, float   real_7, float   real_8, float   real_9, float   real_10, int      integer_11);
void    DestroyImage(jHANDLE  HANDLE_1);
void    ShowImage(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetImageConstantHeight(jHANDLE  HANDLE_1, bool     BOOL_2, float   real_3);
void    SetImagePosition(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4);
void    SetImageColor(jHANDLE  HANDLE_1, int      integer_2, int      integer_3, int      integer_4, int      integer_5);
void    SetImageRender(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetImageRenderAlways(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetImageAboveWater(jHANDLE  HANDLE_1, bool     BOOL_2, bool     BOOL_3);
void    SetImageType(jHANDLE  HANDLE_1, int      integer_2);
jHANDLE CreateUbersplat(float   real_1, float   real_2, const char* STRING_3, int      integer_4, int      integer_5, int      integer_6, int      integer_7, bool     BOOL_8, bool     BOOL_9);
void    DestroyUbersplat(jHANDLE  HANDLE_1);
void    ResetUbersplat(jHANDLE  HANDLE_1);
void    FinishUbersplat(jHANDLE  HANDLE_1);
void    ShowUbersplat(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetUbersplatRender(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetUbersplatRenderAlways(jHANDLE  HANDLE_1, bool     BOOL_2);
void    SetBlight(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4, bool     BOOL_5);
void    SetBlightLoc(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, float   real_3, bool     BOOL_4);
void    SetBlightRect(jHANDLE  HANDLE_1, jHANDLE  HANDLE_2, bool     BOOL_3);
void    SetBlightPoint(jHANDLE  HANDLE_1, float   real_2, float   real_3, bool     BOOL_4);
jHANDLE CreateBlightedGoldmine(jHANDLE  HANDLE_1, float   real_2, float   real_3, float   real_4);
bool    IsPointBlighted(float   real_1, float   real_2);
void    SetDoodadAnimation(float   real_1, float   real_2, float   real_3, int      integer_4, bool     BOOL_5, const char* STRING_6, bool     BOOL_7);
void    SetDoodadAnimationRect(jHANDLE  HANDLE_1, int      integer_2, const char* STRING_3, bool     BOOL_4);
void    StartMeleeAI(jHANDLE  HANDLE_1, const char* STRING_2);
void    StartCampaignAI(jHANDLE  HANDLE_1, const char* STRING_2);
void    CommandAI(jHANDLE  HANDLE_1, int      integer_2, int      integer_3);
void    PauseCompAI(jHANDLE  HANDLE_1, bool     BOOL_2);
jHANDLE GetAIDifficulty(jHANDLE  HANDLE_1);
void    RemoveGuardPosition(jHANDLE  HANDLE_1);
void    RecycleGuardPosition(jHANDLE  HANDLE_1);
void    RemoveAllGuardPositions(jHANDLE  HANDLE_1);
void    ExecuteFunc(const char* STRING_1);
void    Cheat(const char* STRING_1);
bool    IsNoVictoryCheat();
bool    IsNoDefeatCheat();
void    Preload(const char* STRING_1);
void    PreloadEnd(float   real_1);
void    PreloadStart();
void    PreloadRefresh();
void    PreloadEndEx();
void    PreloadGenStart();
void    PreloadGenClear();
void    PreloadGenEnd(const char* STRING_1);
void    Preloader(const char* STRING_1);
